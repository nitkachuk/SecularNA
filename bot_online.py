import os
import asyncio
import telebot
import g4f
import unicodedata
import re
import threading
import queue
import time

telegram_token = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(telegram_token)

aiContext = ""
maxContext = 4096
globalMessageObject = None
sent_message = ""
response = ""

def g4f_with_timeout(txt, timeout=10):
    global aiContext
    global response

    messages = [
        #{"role": "system", "content": f"–∫–æ–Ω—Ç–µ–∫—Å—Ç: {aiContext}"},
        {"role": "system", "content": "–æ—Ç–≤–µ—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏–ª–∏ —Ü–∏—Ç–∞—Ç –∏–ª–∏ —Å–ø–∏—Å–∫–æ–≤, "
                                     "—Ç–æ –æ–±–µ—Ä–Ω–∏ –∏—Ö –≤ pre –ø–æ –ø—Ä–∏–º–µ—Ä—É <pre>—Ç–µ–∫—Å—Ç</pre>. —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑—å —Å –ø–æ–º–æ—â—å—é —ç–º–æ–¥–∑–∏, "
                                     "–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–ø–∏—Å–∫–∏ –Ω–µ–∫—Ä—É–ø–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏"},
        {"role": "user", "content": txt}
    ]
    
    q = queue.Queue()

    def worker():
        try:
            result = g4f.ChatCompletion.create(
                model=g4f.models.gpt_4,
                messages=messages
            )
            q.put(result)
        except Exception as e:
            q.put(e)

    t = threading.Thread(target=worker)
    t.start()
    t.join(timeout)

    if t.is_alive():
        return ""

    result = q.get()
    if isinstance(result, Exception):
        raise result
    return result

def delete_last_message():
    try:
        bot.delete_message(globalMessageObject.chat.id, sent_message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–°–µ–∫—É–Ω–¥–æ—á–∫—É..."
    except Exception as e:
        pass

# def delete_last_message():
#     global sent_message
#     try:
#         bot.delete_message(globalMessageObject.chat.id, sent_message.message_id)
#     except Exception as e:
#         pass
#     finally:
#         sent_message = None  # –æ–±–Ω—É–ª—è–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

def has_glyphs(text):
    for char in text:
        if unicodedata.category(char) == 'Lo':
            return True
    return False

#@bot.message_handler(func=lambda message: True)
#@bot.message_handler(func=lambda message: message.from_user.username == 'kristina_superstar')

@bot.message_handler(func=lambda message: message.from_user.username in ['kristina_superstar', 'gothicspring', 'Kungfuoko'])

def echo_all(message):
    global globalMessageObject  
    global sent_message
    globalMessageObject = message
    
    attempt_count = 0      # —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
    err = ''    # –¢–µ–∫—Å—Ç –æ—à–∏–±–æ–∫ –≤ "–°–µ–∫—É–Ω–¥–æ—á–∫—É..."
    global response

    # if sent_message and "—Å–µ–∫—É–Ω–¥–æ—á–∫—É" in sent_message.text.lower():
    #     delete_last_message()            ‚Ññ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π sent_message 
    #     return


    clockEmodjis = [ '', 'üïë', 'üïì', 'üïï', 'üïó', 'üïô' ]
    
    while True:
        try:
            if sent_message:
                text = sent_message.text.strip()
                if text == '‚ùå':
                    delete_last_message()

            attempt_count += 1  # —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
            
            if attempt_count > 1:
                #sent_message = bot.reply_to(message, f'\n\n\n<i>‚öôÔ∏è –°–µ–∫—É–Ω–¥–æ—á–∫—É... #{attempt_count} ({err})</i>', parse_mode='HTML')  # –æ—Ç–≤–µ—Ç 1
                sent_message = bot.send_message(
                        message.chat.id,
                            #f'_‚öôÔ∏è –°–µ–∫—É–Ω–¥–æ—á–∫—É...  #{attempt_count} ({err})_',
                            clockEmodjis[ attempt_count ],
                        parse_mode='Markdown'
                    )
                err = ''
            else:
                #sent_message = bot.reply_to(message, '\n\n\n<i>‚è≥ –°–µ–∫—É–Ω–¥–æ—á–∫—É...</i>', parse_mode='HTML')  # –æ—Ç–≤–µ—Ç 1
                sent_message = bot.send_message(
                        message.chat.id,
                            #"_‚è≥ –°–µ–∫—É–Ω–¥–æ—á–∫—É..._",
                            clockEmodjis[ attempt_count ],
                        parse_mode='Markdown'
                    )

            if attempt_count >= 5:
                delete_last_message()
                #bot.reply_to(message, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")  # –æ—Ç–≤–µ—Ç 2
                sent_message = bot.send_message(
                        message.chat.id,
                            #"_‚è≥ –°–µ–∫—É–Ω–¥–æ—á–∫—É..._",
                            '‚ùå',
                        parse_mode='Markdown'
                    )
                
                break

            txt = message.text + " –ø–æ-—Ä—É—Å—Å–∫–∏"

            response = g4f_with_timeout( txt )
            if response == "":
                delete_last_message()
                err = '—Ç–∞–π–º–∞—É—Ç g4f'
                continue
            
            response = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', response)
            response = re.sub(r'```(.*?)```', r'<pre>\1</pre>', response, flags=re.DOTALL)


            if has_glyphs( response ):
                delete_last_message()
                err = '–∏–µ—Ä–æ–≥–ª–∏—Ñ—ã'
                continue

            delete_last_message()


            #aiContext += message.text
            try    {
                aiContext += "\n".join(m["content"] for m in messages[-10:])
            }
            except Exception as e:
                response = e
            
            #response = aiContext
            
            if any(tag in response for tag in ['<pre>', '<b>']):
                bot.reply_to(message, response, parse_mode='HTML')
            else:
                bot.reply_to(message, response)

            break

        except telebot.apihelper.ApiTelegramException as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ API Telegram
            err = "–æ—à–∏–±–∫–∞ API Telegram"
            print(err, e)
            delete_last_message()
            continue

        except Exception as e:
            # –î—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            err = str(e)
            print(err, e)
            delete_last_message()
            continue 

    attempt_count = 0  # —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

bot.polling()
