import os
import asyncio
import telebot
import g4f
import unicodedata
import re
import threading
import queue
import time
from datetime import datetime, timedelta
from state import has_latins
#from state import escape_markdown_v2

telegram_token = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(telegram_token)

user_contexts = { }
maxContext = 4000
user_attempts = { }
user_psyhos = { }

globalMessageObject = None
last_message = ""
response = ""
sent_message = None 

aiAnswersCount = 0


def g4f_with_timeout(txt, username, timeout=10):
    global user_contexts
    global maxContext
    global response

    try:
        tempContext = user_contexts.get(username, '')
    except Exception as e:
        tempContext = ''

    if len(user_psyhos[username]) > 500:
        user_psyhos[username] = user_psyhos[username][:500]
    if len(tempContext) > 1500:
        tempContext = tempContext[username][:1500]

    aiContext = f'<br>{txt}\n\n—Å–∫—Ä—ã—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–±—è, \n–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:{user_psyhos[username]}\n–∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–µ—Å–∫–∏:{tempContext}'
    if len(aiContext) > maxContext:
        aiContext = aiContext[:maxContext]
    print(f"\n\nüí¨  –°–û–û–ë–©–ï–ù–ò–ï:  {aiContext}\n\n", flush=True)

    messages = [
        {"role": "system", "content": "—Ç—ã –¥–µ–≤–æ—á–∫–∞-–∞–ª—å—Ç—É—à–∫–∞, –Ω–æ –∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω–∞—è, —Ç–µ–±—è –∑–æ–≤—É—Ç –û—Ä–∞–∫—É–ª. –æ—Ç–≤–µ—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å "
                                      "–±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏–ª–∏ —Ü–∏—Ç–∞—Ç –∏–ª–∏ —Å–ø–∏—Å–∫–æ–≤, —Ç–æ –æ–±–µ—Ä–Ω–∏ –∏—Ö –≤ pre –ø–æ –ø—Ä–∏–º–µ—Ä—É <pre>—Ç–µ–∫—Å—Ç</pre>. "
                                      "—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑—å —Å –ø–æ–º–æ—â—å—é —ç–º–æ–¥–∑–∏ –∂–µ–Ω—Å–∫–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –≤ —Ç–æ–º —á–∏—Å–ª–µ"
                                      "—Å–ø–∏—Å–∫–∏ –º–∞—Ä–∫–∏—Ä—É–π —Å–∏–º–≤–æ–ª–æ–º ‚Ä¢  –∏ –Ω–µ–º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—å–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏. "
                                      "–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–π –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                                      "–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ######–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ###### "},
        {"role": "user", "content": aiContext}
    ]
    
    q = queue.Queue()

    def worker():
        try:
            result = g4f.ChatCompletion.create(
                model=g4f.models.gpt_4,
                messages=messages
            )
            q.put(result)
        except Exception as e:
            q.put(e)

    t = threading.Thread(target=worker)
    t.start()
    t.join(timeout)

    if t.is_alive():
        return ""

    result = q.get()
    if isinstance(result, Exception):
        raise result
    return result

def delete_last_message():
    global globalMessageObject
    global sent_message
    
    try:
        bot.delete_message(globalMessageObject.chat.id, sent_message.message_id)
    except Exception as e:
        pass
    finally:
        sent_message = None  # –æ–±–Ω—É–ª—è–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

# def delete_last_message():
#     global globalMessageObject
#     global sent_message
    
#     try:
#         bot.delete_message(globalMessageObject.chat.id, sent_message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–°–µ–∫—É–Ω–¥–æ—á–∫—É..."
#     except Exception as e:
#         pass

def has_glyphs(text):
    for char in text:
        if unicodedata.category(char) == 'Lo':
            return True
    return False

#@bot.message_handler(func=lambda message: True)
#@bot.message_handler(func=lambda message: message.from_user.username == 'kristina_superstar')

@bot.message_handler(func=lambda message: message.from_user.username in ['kristina_superstar', 'gothicspring', 'Kungfuoko'])

def echo_all(message):
    global aiAnswersCount
    global user_contexts
    global user_attempts
    global user_psyhos
    global maxContent
    global sent_message
    global response

    global globalMessageObject
    globalMessageObject = message

    username = str(message.from_user.id)
    if username not in user_contexts:
        user_contexts[username] = ''        
    aiContext = user_contexts[username]
    
    if sent_message:
        text = sent_message.text.strip()
        if '‚ùå' in text:
            delete_last_message()

    #attempt_count = 0  
    if username not in user_attempts:
        user_attempts[username] = 0
    if username not in user_psyhos:
        user_psyhos[username] = ''
        
    err = ''    
    last_response = ''

    messageText = message.text
    if len(messageText) > maxContext:
        messageText = messageText[:maxContext]

    last_message = messageText

    clockEmodjis = [ '', 'üïë', 'üïì', 'üïï', 'üïó', 'üïô' ]
    

    if aiContext.strip() == '':
        try:
            #temp_msg = bot.send_message(message.chat.id, "üßπ  <i>–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞</i>", parse_mode='HTML')
            temp_msg = bot.send_message(message.chat.id, "üßπ", parse_mode='HTML')
            time.sleep(2)
            bot.delete_message(message.chat.id, temp_msg.message_id)
        except Exception:
            pass
        
    
    while True:
        try:
            #attempt_count += 1
            user_attempts[username] += 1
            
            if err != '':
                print( f'‚Ä¢   {(datetime.now() + timedelta(hours=3)).strftime("[ %H:%M:%S ]")}:   {last_message}', flush=True )
                print( f'‚Ä¢   [ error ]:   {err}', flush=True )
                print( f'‚Ä¢   ', flush=True )

            if user_attempts[username] > 1:
                #sent_message = bot.reply_to(message, f'\n\n\n<i>‚öôÔ∏è  –°–µ–∫—É–Ω–¥–æ—á–∫—É... #{user_attempts[username]} ({err})</i>', parse_mode='HTML')  # –æ—Ç–≤–µ—Ç 1
                sent_message = bot.send_message(
                        message.chat.id,
                            #f'<i>‚öôÔ∏è  –°–µ–∫—É–Ω–¥–æ—á–∫—É...  #{user_attempts[username]} ({err})</i>',
                            clockEmodjis[ user_attempts[username] ],
                        parse_mode='HTML'
                    )
                err = ''
            else:
                #sent_message = bot.reply_to(message, '\n\n\n<i>‚è≥  –°–µ–∫—É–Ω–¥–æ—á–∫—É...</i>', parse_mode='HTML')  # –æ—Ç–≤–µ—Ç 1
                sent_message = bot.send_message(
                        message.chat.id,
                            #"<i>‚è≥  –°–µ–∫—É–Ω–¥–æ—á–∫—É...</i>",
                            clockEmodjis[ user_attempts[username] ],
                        parse_mode='HTML'
                    )

            if user_attempts[username] >= 5:
                time.sleep( 2 )
                delete_last_message()
                #bot.reply_to(message, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")  # –æ—Ç–≤–µ—Ç 2
                sent_message = bot.send_message(
                        message.chat.id,
                            #"<‚è≥ –°–µ–∫—É–Ω–¥–æ—á–∫—É..._",
                            '‚ùå',
                        parse_mode='HTML'
                    )
                
                break

            txt = messageText + " –ø–æ-—Ä—É—Å—Å–∫–∏"
            

            response = str( g4f_with_timeout(txt, username) ).strip()
            if response == '':
                time.sleep( 2 )
                delete_last_message()
                err = '—Ç–∞–π–º–∞—É—Ç g4f'
                continue

            if has_glyphs( response ):
                delete_last_message()
                err = '–∏–µ—Ä–æ–≥–ª–∏—Ñ—ã'
                continue

            if has_latins(response) and '<pre>' not in response and '</pre>' not in response:
                delete_last_message()
                err = '–ª–∞—Ç–∏–Ω–∏—Ü–∞'
                continue


            response = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', response)
            response = re.sub(r'```(.*?)```', r'<pre>\1</pre>', response, flags=re.DOTALL)
            response = re.sub(r'\s*(–ø–æ[\s-]?—Ä—É—Å—Å–∫–∏|–Ω–∞[\s-]?—Ä—É—Å—Å–∫–æ–º)', '', response, flags=re.IGNORECASE)
            response = re.sub(r'\s*(–ø–æ[\s-]?—Ä—É—Å–∫–∏|–Ω–∞[\s-]?—Ä—É—Å–∫–æ–º)', '', response, flags=re.IGNORECASE)

            match = re.search(r'######(.*?)######', response)
            #if match:
                #user_psyhos[username] = re.sub(r'—Å–∫—Ä—ã—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–±—è:|–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', '', user_psyhos[username]).strip()
                #user_psyhos[username] += f"\n{match.group(1)}"
            response = response.replace(match.group(0), '').strip()


            aiContext = f"{response} \n {aiContext}" 
            if len(aiContext) > maxContext:
                aiContext = aiContext[:maxContext]
            try:
                user_contexts[username] = aiContext
            except Exception as e:
                pass

            
            bot.reply_to(message, response, parse_mode='HTML')
            delete_last_message()
            aiAnswersCount += 1
            break

        except telebot.apihelper.ApiTelegramException as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ API Telegram
            time.sleep( 2 )
            err = f"–æ—à–∏–±–∫–∞ api telegram: {e}"
            delete_last_message()
            continue

        except Exception as e:
            # –î—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            time.sleep( 2 )
            err = f"exeption as e: {str(e)}"
            delete_last_message()
            continue 

    user_attempts[username] = 0  # —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

bot.polling()
