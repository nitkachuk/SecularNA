import asyncio
from telegram import Bot
from g4f.client import Client

from replacements import replacements, doReplacements # type: ignore
from secondary import has_glyphs, escape_markdown_v2, escape_system_text, read_the_book  # type: ignore


async def main():
    bot_token = os.getenv('TELEGRAM_TOKEN')
    bot = Bot(token=bot_token)

    # —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∞ (–¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤)
    book = doReplacements( read_the_book() )
    message_to_send = escape_markdown_v2( book )
    
    # –ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª "–°–≤–µ—Ç—Å–∫–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫"
    telegramPost( '@SecularNA', message_to_send, '–∫–∞–Ω–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∞ üìò ‚úÖ' )

    # try:
    #     await bot.send_message(chat_id=chat_id, text=message_to_send, parse_mode='MarkdownV2')
    #     print( "–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∞ üìò ‚úÖ" )
    # except Exception as e:
    #     print( "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∞ üìò ‚ùå" )
    #     print( "–û—à–∏–±–∫–∞:", e, " ‚öôÔ∏è \n" )

    #return
    # –ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª "–¢–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –ë–∏–ª–ª"
    chat_id_3 = '@BillSpeaks'
    client = Client()

    attempts = 0
    while True:
        if attempts >= 20:
            print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
            break
        
        role_system = """ –í—ã—Å–∫–∞–∂–∏—Å—å –ø–æ-—Ä—É—Å—Å–∫–∏, –ø–æ —Ç–µ–∫—Å—Ç—É, –≤ –¥—É—Ö–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. 
                          1-2 –Ω–µ–±–æ–ª—å—à–∏—Ö –∞–±–∑–∞—Ü–∞. –î–æ–±–∞–≤—å 3-5 —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç. """
        role_user = book

        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[ 
                {"role": "system", "content": role_system},
                {"role": "user", "content": role_user}
            ],
        )

        ai_response = escape_system_text( escape_markdown_v2( 
            doReplacements(completion.choices[0].message.content) ), role_system  )
        ai_response = "*__–í—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –ø–æ –∫–Ω–∏–≥–µ__* üó£Ô∏è \n\n" +ai_response

        if has_glyphs(ai_response):
            print("has glyphs. try again... ‚öôÔ∏è")
            attempts += 1
            continue

        if role_user in ai_response:
            print("role_user in message. try again... ‚öôÔ∏è")
            attempts += 1
            continue

        if len( str(ai_response) ) < 250:
            print("too short response. try again... ‚öôÔ∏è")
            attempts += 1
            continue

        try:
            await bot.send_message( chat_id=chat_id_3, text=ai_response, parse_mode='MarkdownV2' )
            print( "–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –ë–∏–ª–ª–∞ –£–∏–ª—Å–æ–Ω–∞ üó£Ô∏è ‚úÖ" )
        except Exception as e:
            print( "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –ë–∏–ª–ª–∞ –£–∏–ª—Å–æ–Ω–∞ üó£Ô∏è ‚ùå" )
            print( "–û—à–∏–±–∫–∞:", e, " ‚öôÔ∏è \n" )
            #print( "–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:", ai_response, " ‚öôÔ∏è \n" )
            attempts += 1
            continue
            
        break


    # –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    while True:
        if attempts >= 20:
            print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
            break
        
        role_system = """ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã: —á–µ—Å—Ç–Ω–æ—Å—Ç—å, –Ω–µ–ø—Ä–µ–¥—É–±–µ–∂–¥–µ–Ω–Ω–æ—Å—Ç—å, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, 
                          –ø—Ä–∏–Ω—è—Ç–∏–µ, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –¥–æ–≤–µ—Ä–∏–µ, –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏—è, –Ω–∞–¥–µ–∂–¥–∞, –≤–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–æ–º—É —Ä–µ—à–µ–Ω–∏—é, 
                          –º—É–∂–µ—Å—Ç–≤–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —É–ø–æ—Ä—Å—Ç–≤–æ, –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–µ–±—è, –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ, —Ç–µ—Ä–ø–µ–Ω–∏–µ, —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ, 
                          –ª—é–±–æ–≤—å, –ø—Ä–æ—â–µ–Ω–∏–µ, —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, —á–∏—Å—Ç–æ—Å–µ—Ä–¥–µ—á–∏–µ, –±–µ—Å–∫–æ—Ä—ã—Å—Ç–∏–µ, –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ—Å—Ç—å. 
                          –ü—Ä–∏–≤–µ–¥–∏ 3 –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ —Ç–µ–∫—Å—Ç—É, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–¥–æ —Ä–∞–±–æ—Ç–∞—Ç—å, –∏ –Ω–∞–ø–∏—à–∏ –ø–æ 
                          1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π. –†–∞–∑–¥–µ–ª–∏ —ç—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ 
                          –æ–±–æ–∑–Ω–∞—á—å –∫–∞–∂–¥—ã–π –æ–¥–Ω–∏–º —ç–º–æ–¥–∑–∏. –ø–æ-—Ä—É—Å—Å–∫–∏. """
        role_user = book

        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[ 
                {"role": "system", "content": role_system},
                {"role": "user", "content": role_user}
            ],
        )

        ai_response = escape_system_text( escape_markdown_v2( 
            doReplacements(completion.choices[0].message.content) ) )
        ai_response = "*__–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã__* üå± \n\n" +ai_response

        if has_glyphs(ai_response):
            print("has glyphs. try again... ‚öôÔ∏è")
            attempts += 1
            continue

        if len( str(ai_response) ) < 250:
            print("too short response. try again... ‚öôÔ∏è")
            attempts += 1
            continue

        try:
            await bot.send_message( chat_id=chat_id_3, text=ai_response, parse_mode='MarkdownV2' )
            print( "–û—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üå± ‚úÖ" )
        except Exception as e:
            print( "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üå± ‚ùå" )
            print( "–û—à–∏–±–∫–∞:", e, " ‚öôÔ∏è \n" )
            #print( "–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:", ai_response, " ‚öôÔ∏è \n" )
            attempts += 1
            continue
            
        break


    # —Ç–µ–º—ã –¥–ª—è —Å–æ–±—Ä–∞–Ω–∏—è
    while True:
        if attempts >= 20:
            print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
            break
        
        role_system = """ –ü—Ä–∏–¥—É–º–∞–π 2 —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ—Å–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª–∏–∫–∞—é—Ç—Å—è —Å —Ç–µ–∫—Å—Ç–æ–º, 
                          –Ω–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç –µ–≥–æ. –†–∞–∑–¥–µ–ª–∏ —ç—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ 
                          –æ–±–æ–∑–Ω–∞—á—å –∫–∞–∂–¥—ã–π –æ–¥–Ω–∏–º —ç–º–æ–¥–∑–∏. –ø–æ-—Ä—É—Å—Å–∫–∏. """
        role_user = book

        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[ 
                {"role": "system", "content": role_system},
                {"role": "user", "content": role_user}
            ],
        )

        ai_response = escape_system_text( escape_markdown_v2( 
            doReplacements(completion.choices[0].message.content) ) )
        ai_response = "*__–¢–µ–º—ã –¥–ª—è —Å–æ–±—Ä–∞–Ω–∏–π__* üìå \n\n" +ai_response

        if has_glyphs(ai_response):
            print("has glyphs. try again... ‚öôÔ∏è")
            attempts += 1
            continue

        if len( str(ai_response) ) < 250:
            print("too short response. try again... ‚öôÔ∏è")
            attempts += 1
            continue

        try:
            await bot.send_message( chat_id=chat_id_3, text=ai_response, parse_mode='MarkdownV2' )
            print( "–û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–º—ã –¥–ª—è —Å–æ–±—Ä–∞–Ω–∏–π üìå ‚úÖ" )
        except Exception as e:
            print( "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–º—ã –¥–ª—è —Å–æ–±—Ä–∞–Ω–∏–π üìå ‚ùå" )
            print( "–û—à–∏–±–∫–∞:", e, " ‚öôÔ∏è \n" )
            #print( "–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:", ai_response, " ‚öôÔ∏è \n" )
            attempts += 1
            continue
            
        break
    

    # –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å
    while True:
        if attempts >= 20:
            print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
            break
        
        role_system = """ –ü—Ä–∏–¥—É–º–∞–π 3 –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, 
                          —á—Ç–æ–±—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—É. –†–∞–∑–¥–µ–ª–∏ —ç—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ 
                          –æ–±–æ–∑–Ω–∞—á—å –∫–∞–∂–¥—ã–π –æ–¥–Ω–∏–º —ç–º–æ–¥–∑–∏. –ø–æ-—Ä—É—Å—Å–∫–∏. """
        role_user = book

        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[ 
                {"role": "system", "content": role_system},
                {"role": "user", "content": role_user}
            ],
        )

        ai_response = escape_system_text( escape_markdown_v2( 
            doReplacements(completion.choices[0].message.content) ) )
        ai_response = "*__–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å__* üìù \n\n" +ai_response

        if has_glyphs(ai_response):
            print("has glyphs. try again... ‚öôÔ∏è")
            attempts += 1
            continue

        if len( str(ai_response) ) < 250:
            print("too short response. try again... ‚öôÔ∏è")
            attempts += 1
            continue

        try:
            await bot.send_message( chat_id=chat_id_3, text=ai_response, parse_mode='MarkdownV2' )
            print( "–û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å üìù ‚úÖ" )
        except Exception as e:
            print( "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å üìù ‚ùå" )
            print( "–û—à–∏–±–∫–∞:", e, " ‚öôÔ∏è \n" )
            #print( "–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:", ai_response, " ‚öôÔ∏è \n" )
            attempts += 1
            continue
            
        break

    
    print( "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:", (attempts + 1) )
    print( "success!" )

asyncio.run(main())
