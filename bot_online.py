import os
import asyncio
import telebot
import g4f
import unicodedata
from html import escape
import re
import concurrent.futures
import time  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è time.time()

telegram_token = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(telegram_token)

def has_glyphs(text):
    for char in text:
        if unicodedata.category(char) == 'Lo':
            return True
    return False

@bot.message_handler(func=lambda message: message.from_user.username in ['kristina_superstar', 'gothicspring', 'Kungfuoko'])
def echo_all(message):
    attempt_count = 0  # —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
    sent_message = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    while attempt_count < 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        attempt_count += 1

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–µ–∫—É–Ω–¥–æ—á–∫—É..." —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if sent_message is None:
                sent_message = bot.reply_to(message, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É... #{attempt_count}' if attempt_count > 1 else '–°–µ–∫—É–Ω–¥–æ—á–∫—É...')

            txt = message.text + " –ø–æ-—Ä—É—Å—Å–∫–∏"
            start_time = time.time()

            # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(g4f.ChatCompletion.create, model=g4f.models.gpt_4, messages=[ 
                    {"role": "system", "content": "–æ—Ç–≤–µ—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏, –µ—Å–ª–∏ –≤ —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–æ–¥, —Ü–∏—Ç–∞—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ –æ–±–µ—Ä–Ω–∏ —Ç—É —á–∞—Å—Ç—å –≤ —Ç–µ–≥–∏ pre –ø–æ –ø—Ä–∏–º–µ—Ä—É <pre>—Ç–µ–∫—Å—Ç</pre>"},
                    {"role": "user", "content": txt}
                ])
                
                try:
                    response = future.result(timeout=1)  # –∂–¥—ë–º —Ä–æ–≤–Ω–æ 1 —Å–µ–∫—É–Ω–¥—É
                except concurrent.futures.TimeoutError:
                    continue  # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à–µ–ª –≤–æ–≤—Ä–µ–º—è

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            response = response.replace("**", "<pre>").replace("**", "</pre>")  # –ó–∞–º–µ–Ω–∞ –¥–ª—è —Ç–µ–≥–æ–≤ pre

            if has_glyphs(response):
                continue  # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –≥–ª–∏—Ñ—ã, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–µ–∫—É–Ω–¥–æ—á–∫—É..." –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if sent_message:
                bot.delete_message(message.chat.id, sent_message.message_id)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if "<pre>" in response:
                bot.reply_to(message, response, parse_mode='HTML')
            else:
                bot.reply_to(message, response)

            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω

        except telebot.apihelper.ApiTelegramException as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API Telegram
            bot.delete_message(message.chat.id, sent_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–µ–∫—É–Ω–¥–æ—á–∫—É..."
            continue  # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            bot.delete_message(message.chat.id, sent_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–µ–∫—É–Ω–¥–æ—á–∫—É..."
            continue  # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞

    else:
        # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ‚Äî –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ üïò")

bot.polling()  # —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
